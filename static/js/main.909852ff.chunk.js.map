{"version":3,"sources":["components/modals/help-drawer/HelpDrawer.js","context/CalculatorContext.js","components/features/input-list/InputList.js","components/features/info-card/InfoCard.js","components/screens/main/MainScreen.js","context/CalculatorContextProvider.js","index.js"],"names":["HelpDrawer","isOpen","onClose","className","title","usePortal","CalculatorContext","React","createContext","InputListItem","props","name","color","sizeNum","sizeUnit","intervalNum","intervalUnit","onDelete","onModify","style","backgroundColor","hex","content","colors","triangle","onChange","newColor","console","log","rgb","r","g","b","minimal","small","onClick","icon","fill","value","min","onValueChange","valueAsNumber","event","currentTarget","InputList","darkMode","useContext","inputs","removeInput","modifyInput","inputItems","map","i","newItem","length","description","InfoCard","units","MainScreen","useLocalStorage","setDarkMode","useState","helpOpen","setHelpOpen","output","addInput","durationIntervalUnit","setDurationIntervalUnit","totalSize","totalRecords","avgThroughput","startTimestamp","endTimestamp","lineChartRef","useRef","pieChartRef","Chart","defaults","global","defaultFontColor","id","elevation","Elevation","THREE","filesize","base","numeral","format","ref","data","lineChartData","height","options","text","maintainAspectRatio","tooltip","enabled","mode","scales","xAxes","type","time","valueOf","max","yAxes","scaleLabel","display","labelString","legend","pieChartData","animation","duration","intent","Intent","PRIMARY","href","CalculatorContextProvider","useList","push","updateAt","removeAt","durationIntervalNum","setDurationIntervalNum","normalizedRates","sizeNumBytes","durationNumSeconds","moment","asSeconds","bytesPerSecond","recordsPerSecond","outputDurationSeconds","add","totalDataBytes","datasets","borderWidth","labels","forEach","rate","lineChartDataSet","label","x","y","borderColor","colorOptions","useMemo","context","idx","Provider","FocusStyleManager","onlyShowFocusOnTabs","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.909852ff.chunk.js","sourcesContent":["import {Drawer} from \"@blueprintjs/core\";\r\nimport './HelpDrawer.scss';\r\n\r\nfunction HelpDrawer({ isOpen, onClose, className }) {\r\n    return (<Drawer\r\n        title=\"Help\"\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        className={className}\r\n        usePortal={false}\r\n    >\r\n        <div className=\"HelpDrawer__content\">\r\n            <p>\r\n                This calculator estimates the quantity and throughput of data ingested\r\n                into a system.\r\n            </p>\r\n            <br />\r\n            <h4>1. Add Inputs</h4>\r\n            <p>\r\n                Add one or more data inputs. Each input will contribute to the total data through the system.\r\n                For each input, you must choose a quantity and interval. For example, 1 megabyte of data every\r\n                30 seconds.\r\n            </p>\r\n            <h4>Output Duration</h4>\r\n            <p>\r\n                In the output panel, choose a duration to calculate.\r\n            </p>\r\n            <h4>Interpreting the Output</h4>\r\n            <p>\r\n\r\n            </p>\r\n        </div>\r\n    </Drawer>);\r\n}\r\n\r\nexport default HelpDrawer;\r\n","import React from 'react';\r\n\r\nconst CalculatorContext = React.createContext(null);\r\n\r\nexport default CalculatorContext;\r\n","import './InputList.scss';\r\nimport {useContext} from \"react\";\r\nimport CalculatorContext from \"../../../context/CalculatorContext\";\r\nimport {Button, ControlGroup, HTMLSelect, NonIdealState, NumericInput, Popover} from \"@blueprintjs/core\";\r\nimport {TwitterPicker} from \"react-color\";\r\n\r\nfunction InputListItem(props) {\r\n    const {\r\n        name,\r\n        color,\r\n        sizeNum,\r\n        sizeUnit,\r\n        intervalNum,\r\n        intervalUnit,\r\n        onDelete,\r\n        onModify\r\n    } = props;\r\n\r\n    const style={\r\n        backgroundColor: color.hex\r\n    }\r\n\r\n    return (\r\n        <div className=\"InputListItem\" ><Popover content={(\r\n            <TwitterPicker\r\n                colors={['#2965CC', '#29A634', '#D99E0B', '#D13913', '#8F398F', '#00B3A4', '#DB2C6F', '#9BBF30', '#96622D', '#7157D9']}\r\n                triangle=\"hide\" color={color} onChange={(newColor) => {\r\n                    console.log(newColor);\r\n                onModify({\r\n                    color: {\r\n                        hex: newColor.hex,\r\n                        rgb: `rgb(${newColor.rgb.r}, ${newColor.rgb.g}, ${newColor.rgb.b})`\r\n                    },\r\n                    sizeNum,\r\n                    sizeUnit,\r\n                    intervalNum,\r\n                    intervalUnit\r\n                });\r\n            }} />\r\n        )}>\r\n            <div className=\"InputListItem__colorButton\" style={style}>\r\n            </div>\r\n        </Popover>\r\n            {name} <Button minimal small className=\"InputListItem__button\" onClick={onDelete} icon=\"cross\" />\r\n            <div className=\"InputListItem__row\">\r\n            <ControlGroup fill>\r\n                <NumericInput\r\n                    fill\r\n                    value={sizeNum}\r\n                    min={0}\r\n                    onValueChange={(valueAsNumber) => {\r\n                    onModify({\r\n                        color,\r\n                        sizeNum: valueAsNumber,\r\n                        sizeUnit,\r\n                        intervalNum,\r\n                        intervalUnit\r\n                    });\r\n                }} />\r\n                <HTMLSelect fill value={sizeUnit} onChange={(event) => {\r\n                    onModify({\r\n                        color,\r\n                        sizeNum,\r\n                        sizeUnit: event.currentTarget.value,\r\n                        intervalNum,\r\n                        intervalUnit\r\n                    });\r\n                }}>\r\n                    <option value=\"byte\">bytes</option>\r\n                    <option value=\"kilobyte\">kilobytes</option>\r\n                    <option value=\"megabyte\">megabytes</option>\r\n                    <option value=\"gigabyte\">gigabytes</option>\r\n                    <option value=\"terabyte\">terabytes</option>\r\n                </HTMLSelect>\r\n            </ControlGroup><div className=\"InputListItem__rowLabel\">\r\n                every\r\n            </div>\r\n            <ControlGroup fill>\r\n                <NumericInput\r\n                    fill\r\n                    value={intervalNum} min={1} onValueChange={(valueAsNumber) => {\r\n                    onModify({\r\n                        color,\r\n                        sizeNum,\r\n                        sizeUnit,\r\n                        intervalNum: valueAsNumber,\r\n                        intervalUnit\r\n                    });\r\n                }} />\r\n                <HTMLSelect fill value={intervalUnit} onChange={(event) => {\r\n                    onModify({\r\n                        color,\r\n                        sizeNum,\r\n                        sizeUnit,\r\n                        intervalNum,\r\n                        intervalUnit: event.currentTarget.value\r\n                    });\r\n                }}>\r\n                    <option value=\"milliseconds\">milliseconds</option>\r\n                    <option value=\"seconds\">seconds</option>\r\n                    <option value=\"minutes\">minutes</option>\r\n                    <option value=\"hours\">hours</option>\r\n                    <option value=\"days\">days</option>\r\n                    <option value=\"months\">months</option>\r\n                    <option value=\"years\">years</option>\r\n                </HTMLSelect>\r\n            </ControlGroup>\r\n            </div>\r\n        </div>);\r\n}\r\nfunction InputList({darkMode}) {\r\n    const {\r\n        inputs,\r\n        removeInput,\r\n        modifyInput\r\n    } = useContext(CalculatorContext);\r\n\r\n    const inputItems = inputs.map(({\r\n                                       color,\r\n                                       sizeNum,\r\n                                       sizeUnit,\r\n                                       intervalNum,\r\n                                       intervalUnit\r\n                                   }, i) => (<InputListItem\r\n        name={`Input ${i+1}`}\r\n        color={color}\r\n        sizeNum={sizeNum}\r\n        sizeUnit={sizeUnit}\r\n        intervalNum={intervalNum}\r\n        intervalUnit={intervalUnit}\r\n        onDelete={() => removeInput(i)}\r\n        onModify={(newItem) => modifyInput(newItem, i)}\r\n    />));\r\n\r\n    return (<div className={darkMode ? \"InputList dark-scrollbar\" : \"InputList light-scrollbar\"}>\r\n        {inputItems}\r\n        {inputItems.length === 0 && (\r\n            <NonIdealState icon=\"satellite\" className=\"InputList__zeroState\" description=\"Add an input to calculate data transfer & storage numbers for a time interval.\" />\r\n        )}\r\n    </div>);\r\n}\r\n\r\nexport default InputList;\r\n","import './InfoCard.scss';\r\nimport {Button, Tooltip} from '@blueprintjs/core';\r\n\r\nfunction InfoCard({name, value, units, description}) {\r\n    return (\r\n        <div className=\"InfoCard\">\r\n            <div className=\"InfoCard__name\">\r\n                {name || ''}\r\n            </div>\r\n            <div className=\"InfoCard__value\">\r\n                {value || '0'}{units || ''}\r\n                {description && (\r\n                    <Tooltip content={description}>\r\n                        <Button className=\"helpButton\" small minimal icon=\"help\" />\r\n                    </Tooltip>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InfoCard;\r\n","import './MainScreen.scss';\r\nimport {Button, Card, Elevation, Intent, HTMLSelect, Callout, Tooltip} from '@blueprintjs/core';\r\nimport {useState, useContext, useRef} from 'react';\r\nimport {useLocalStorage} from \"react-use\";\r\nimport HelpDrawer from \"../../modals/help-drawer/HelpDrawer\";\r\nimport CalculatorContext from \"../../../context/CalculatorContext\";\r\nimport InputList from \"../../features/input-list/InputList\";\r\nimport InfoCard from \"../../features/info-card/InfoCard\";\r\nimport filesize from 'filesize';\r\nimport numeral from 'numeral';\r\nimport {Doughnut, Line} from \"react-chartjs-2\";\r\nimport Chart from 'chart.js';\r\n\r\nfunction MainScreen() {\r\n    const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\", true);\r\n    const [helpOpen, setHelpOpen] = useState(false);\r\n\r\n    const {\r\n        output,\r\n        addInput,\r\n        durationIntervalUnit,\r\n        setDurationIntervalUnit\r\n    } = useContext(CalculatorContext);\r\n\r\n    const {\r\n        totalSize,\r\n        totalRecords,\r\n        avgThroughput,\r\n        startTimestamp,\r\n        endTimestamp\r\n    } = output;\r\n\r\n    const lineChartRef = useRef(null);\r\n    const pieChartRef = useRef(null);\r\n    Chart.defaults.global.defaultFontColor = darkMode ? 'white' : 'black';\r\n\r\n    return (\r\n        <div className={darkMode ? 'bp3-dark mainScreen' : 'bp3-light mainScreen'}>\r\n            <div id=\"header\">\r\n                <section>\r\n                <div id=\"headerNavBar\" className=\"bp3-navbar\">\r\n                    <div className=\"bp3-navbar-group bp3-align-left\">\r\n                        <div className=\"bp3-navbar-heading\">Data Transfer & Storage Calculator</div>\r\n                    </div>\r\n                    <div className=\"bp3-navbar-group bp3-align-right\">\r\n                        <Button minimal icon={darkMode ? 'moon' : 'flash'}  onClick={() => {\r\n                            setDarkMode(!darkMode);\r\n                        }}/>\r\n                    </div>\r\n                </div>\r\n                </section>\r\n            </div>\r\n            <div className=\"sectionWrapper\">\r\n                <section>\r\n                    <div className=\"row start-xs center-xs\">\r\n                        <div className=\"col-xs-12 col-md-4 colMarginBottom\">\r\n                            <Card className=\"MainScreenCard\" elevation={Elevation.THREE}>\r\n                                <div className=\"MainScreenCard__header\">\r\n                                    <div className=\"MainScreenCard__header__text\">Inputs\r\n                                        <Tooltip content=\"Add one or more input streams. Each input represents an amount of data sent at an interval.\">\r\n                                            <Button className=\"helpButton\" small minimal icon=\"help\" />\r\n                                        </Tooltip></div>\r\n                                    <Button className=\"addInputButton\" icon=\"plus\" minimal onClick={() => {\r\n                                        addInput();\r\n                                    }} />\r\n                                </div>\r\n                                <InputList darkMode={darkMode} />\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-xs-12 col-md-8 colMarginBottom\">\r\n                            <Card className=\"MainScreenCard\" elevation={Elevation.THREE}>\r\n                                <div className=\"MainScreenCard__header\">\r\n                                    <div className=\"MainScreenCard__header__text\">\r\n                                        <div className=\"durationSelectContainer\">\r\n                                            <p>\r\n                                                Output After\r\n                                            </p>\r\n                                            <HTMLSelect value={durationIntervalUnit} onChange={(event) => {\r\n                                                setDurationIntervalUnit(event.currentTarget.value);\r\n                                            }}>\r\n                                                <option value=\"seconds\">one second</option>\r\n                                                <option value=\"minutes\">one minute</option>\r\n                                                <option value=\"hours\">one hour</option>\r\n                                                <option value=\"days\">one day</option>\r\n                                                <option value=\"months\">one month</option>\r\n                                                <option value=\"years\">one year</option>\r\n                                            </HTMLSelect>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"MainScreenCard__content\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-xs-6\">\r\n                                            <InfoCard name=\"Total Size\" value={filesize(totalSize, {base: 10})} description={\"Total data size, not taking into account any compression or storage efficiencies. Values are in metric (base-10) units.\"}/>\r\n                                        </div>\r\n                                        <div className=\"col-xs-6\">\r\n                                            <InfoCard name=\"# of Records\" value={numeral(totalRecords).format('0a')} description={\"Total number of records, if each occurrence of an input at its frequency is one record.\"}/>\r\n                                        </div>\r\n                                        <div className=\"col-xs-6\">\r\n                                            <InfoCard name=\"Average Throughput\" value={filesize(avgThroughput, {base: 10})} units={\"/s\"} description={\"Average throughput over the output duration, shown as information sent per second. Values are in metric (base-10) units.\"}/>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row start-xs center-xs\">\r\n                                        <div className=\"col-xs-12\">\r\n                                            <hr />\r\n                                        </div>\r\n                                        <div className=\"col-xs-12 col-sm-6\">\r\n                                            <Line\r\n                                                ref={lineChartRef}\r\n                                                data={output.lineChartData}\r\n                                                height={250}\r\n                                                options={{\r\n                                                    title: {\r\n                                                        text: 'Output Size over Time'\r\n                                                    },\r\n                                                    darkMode,\r\n                                                    maintainAspectRatio: false,\r\n                                                    tooltip: {\r\n                                                        enabled: true,\r\n                                                        mode: 'y'\r\n                                                    },\r\n                                                    scales: {\r\n                                                        xAxes: [{\r\n                                                            type: 'time',\r\n                                                            time: {\r\n                                                                min: startTimestamp.valueOf(),\r\n                                                                max: endTimestamp.valueOf()\r\n                                                            }\r\n                                                        }],\r\n                                                        yAxes: [{\r\n                                                            scaleLabel: {\r\n                                                                display: true,\r\n                                                                labelString: 'Total Size (Bytes)'\r\n                                                            }\r\n                                                        }]\r\n                                                    },\r\n                                                    legend: {\r\n                                                        display: false\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"col-xs-6\">\r\n                                            <Doughnut\r\n                                                ref={pieChartRef}\r\n                                                data={output.pieChartData}\r\n                                                height={250}\r\n                                                darkMode={darkMode}\r\n                                                options={{\r\n                                                    title: {\r\n                                                        text: 'Output Proportion'\r\n                                                    },\r\n                                                    darkMode,\r\n                                                    maintainAspectRatio: false,\r\n                                                    animation: {\r\n                                                        duration: 100\r\n                                                    }\r\n                                            }} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                        <div className=\"col-xs-12 colMarginBottom\">\r\n                            <Callout intent={Intent.PRIMARY}>\r\n                                Need a solution for organizing and analyzing your hardware data?\r\n                                TelemetryJet is a powerful tool to help hardware engineering teams gain insight from their data.&nbsp;\r\n                                <a href=\"https://www.telemetryjet.com/\">Learn More</a>\r\n                            </Callout>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            <HelpDrawer\r\n                isOpen={helpOpen}\r\n                onClose={() => setHelpOpen(false)}\r\n                className={darkMode ? 'bp3-dark' : 'bp3-light'}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainScreen;\r\n","import CalculatorContext from \"./CalculatorContext\";\r\nimport { useMemo, useState } from \"react\";\r\nimport {useList} from \"react-use\";\r\nimport moment from 'moment';\r\n\r\nfunction CalculatorContextProvider(props) {\r\n    const [inputs, {\r\n        push,\r\n        updateAt,\r\n        removeAt\r\n    }] = useList([{\r\n        color: {hex: \"#2965CC\"},\r\n        intervalNum: 100,\r\n        intervalUnit: \"milliseconds\",\r\n        sizeNum: 32,\r\n        sizeUnit: \"bytes\"\r\n    }]);\r\n    console.log(inputs);\r\n    const [durationIntervalNum, setDurationIntervalNum] = useState(1);\r\n    const [durationIntervalUnit, setDurationIntervalUnit] = useState(\"years\");\r\n\r\n    // Compute normalized rates in bytes for all units\r\n    const normalizedRates = inputs.map(({\r\n        color,\r\n        intervalNum,\r\n        intervalUnit,\r\n        sizeNum,\r\n        sizeUnit\r\n                                        }) => {\r\n\r\n        let sizeNumBytes = sizeNum;\r\n        if (sizeUnit === \"byte\") {\r\n            sizeNumBytes = sizeNum;\r\n        } else if (sizeUnit === \"kilobyte\") {\r\n            sizeNumBytes = sizeNum * 1000;\r\n        } else if (sizeUnit === \"megabyte\") {\r\n            sizeNumBytes = sizeNum * 1000 * 1000;\r\n        } else if (sizeUnit === \"gigabyte\") {\r\n            sizeNumBytes = sizeNum * 1000 * 1000 * 1000;\r\n        } else if (sizeUnit === \"terabyte\") {\r\n            sizeNumBytes = sizeNum * 1000 * 1000 * 1000 * 1000;\r\n        }\r\n\r\n        const duration = moment.duration(intervalNum, intervalUnit);\r\n        const durationNumSeconds = duration.asSeconds();\r\n        return {\r\n            bytesPerSecond: sizeNumBytes / durationNumSeconds,\r\n            recordsPerSecond: 1 / durationNumSeconds,\r\n            color\r\n        };\r\n    });\r\n\r\n    const outputDurationSeconds = moment.duration(durationIntervalNum, durationIntervalUnit).asSeconds();\r\n    const startTimestamp = moment();\r\n    const endTimestamp = moment().add(outputDurationSeconds, \"seconds\");\r\n\r\n    let totalDataBytes = 0;\r\n    let totalRecords = 0;\r\n    let avgThroughput = 0;\r\n    const pieChartData = {\r\n        datasets: [{\r\n            data: [],\r\n            backgroundColor: [],\r\n            borderWidth: 0\r\n        }],\r\n        labels: []\r\n    }\r\n    const lineChartData = {\r\n        datasets: [],\r\n        labels: []\r\n    }\r\n    normalizedRates.forEach((rate, i) => {\r\n        avgThroughput += rate.bytesPerSecond;\r\n        totalDataBytes += rate.bytesPerSecond * outputDurationSeconds;\r\n        totalRecords += rate.recordsPerSecond * outputDurationSeconds;\r\n        pieChartData.datasets[0].data.push(rate.bytesPerSecond * outputDurationSeconds);\r\n        pieChartData.datasets[0].backgroundColor.push(rate.color.hex);\r\n        pieChartData.labels.push(`Input ${i + 1}`);\r\n\r\n        const lineChartDataSet = {\r\n            label: `Input ${i + 1}`,\r\n            data: [{\r\n                x: startTimestamp,\r\n                y: 0\r\n            }, {\r\n                x: endTimestamp,\r\n                y: rate.bytesPerSecond * outputDurationSeconds\r\n            }],\r\n            borderColor: rate.color.hex\r\n        }\r\n        lineChartData.datasets.push(lineChartDataSet);\r\n        lineChartData.labels.push(`Input ${i + 1}`);\r\n    })\r\n    if (normalizedRates.length === 0) {\r\n        pieChartData.datasets[0].data.push(100);\r\n        pieChartData.datasets[0].backgroundColor.push(\"#738694\");\r\n        pieChartData.labels.push(\"No Data\");\r\n    }\r\n\r\n    const colorOptions = useMemo(() =>\r\n        ['#2965CC', '#29A634', '#D99E0B', '#D13913', '#8F398F', '#00B3A4', '#DB2C6F', '#9BBF30', '#96622D', '#7157D9'],\r\n    []);\r\n\r\n    const context = {\r\n        inputs,\r\n        output: {\r\n            totalSize: totalDataBytes,\r\n            totalRecords: totalRecords,\r\n            avgThroughput,\r\n            pieChartData,\r\n            lineChartData,\r\n            startTimestamp,\r\n            endTimestamp\r\n        },\r\n        addInput: () => {\r\n            push({\r\n                    color: {\r\n                        hex: colorOptions[(inputs.length) % colorOptions.length]\r\n                    },\r\n                    sizeNum: 1,\r\n                    sizeUnit: \"bytes\",\r\n                    intervalNum: 1,\r\n                    intervalUnit: \"seconds\"\r\n                });\r\n        },\r\n        removeInput: (idx) => {\r\n            removeAt(idx);\r\n        },\r\n        modifyInput: (newItem, i) => {\r\n            updateAt(i, newItem);\r\n        },\r\n        durationIntervalNum,\r\n        setDurationIntervalNum,\r\n        durationIntervalUnit,\r\n        setDurationIntervalUnit\r\n    };\r\n\r\n    return (<CalculatorContext.Provider value={context} {...props} />);\r\n}\r\n\r\nexport default CalculatorContextProvider;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport MainScreen from './components/screens/main/MainScreen';\r\nimport { FocusStyleManager } from \"@blueprintjs/core\";\r\nimport CalculatorContextProvider from \"./context/CalculatorContextProvider\";\r\n\r\nFocusStyleManager.onlyShowFocusOnTabs();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <CalculatorContextProvider>\r\n          <MainScreen />\r\n      </CalculatorContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}